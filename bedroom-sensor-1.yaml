esphome:
  name: bedroom-sensor-1

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  platform: esphome
  password: "bebca7e1c42133c78b792feb559814eb"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bedroom-Sensor-1"
    password: "dbX9bgsSzZHo"
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

sensor:
  - platform: aht10
    temperature:
      name: "Bedroom AHT10 Temperature"
      filters:
        - lambda: return x * 1.8 + 32.0;  # Convert Celsius to Fahrenheit
      unit_of_measurement: "Â°F"
      accuracy_decimals: 1
    humidity:
      name: "Bedroom AHT10 Humidity"
    update_interval: 60s

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: uptime
    type: seconds
    name: Uptime Sensor
    
text_sensor:
  - platform: version
    id: esphome_version
    name: "ESPHome Version"

  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic
    
# Restart & Safe Mode Buttons
button:
  - platform: restart
    name: "Restart Device"
  - platform: safe_mode
    name: "Restart in Safe Mode"      

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: America/Chicago
    on_time_sync:
      - if:
          condition:
            lambda: 'return id(device_last_restart).state == "";'
          then:
            - text_sensor.template.publish:
                id: device_last_restart
                state: !lambda 'return id(homeassistant_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'

web_server:
  port: 80
  include_internal: True
  version: 3


captive_portal:
    